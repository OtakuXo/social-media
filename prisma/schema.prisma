datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String              @unique
  password       String
  emailVerified  DateTime?
  image          String?
  avatar         String?
  accounts       Account[]
  post           Post[]
  likedPosts     Like[]
  dislikedposts  DisLike[]
  commentedposts Usercomments[]
  friends        Userfriends[]
  friendrequest  Userfriendrequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Userfriends {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  friendId       String   @db.ObjectId
  friendName     String 
  user           User?    @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
}

model Userfriendrequest {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId       String   @db.ObjectId
  senderName     String 
  user           User?    @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
}

model Usercomments {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  commentedPostId String[]
  user            User?    @relation(fields: [userId], references: [id])
  userId          String   @unique @db.ObjectId
}

model Like {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  likedPostId String[]
  user        User?    @relation(fields: [userId], references: [id])
  userId      String   @unique @db.ObjectId
}

model DisLike {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  disLikedPostId String[]
  user           User?    @relation(fields: [userId], references: [id])
  userId         String   @unique @db.ObjectId
}

model Post {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String
  description String?
  likes       Int           @default(0)
  dislike     Int           @default(0)
  author      User?         @relation(fields: [authorId], references: [id])
  authorId    String?       @db.ObjectId
  PostContent PostContent[]
  comment     Comment[]
}

model PostContent {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  image  String @unique
  post   Post?  @relation(fields: [postId], references: [id])
  postId String @unique @db.ObjectId
}

model Comment {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  authorId String @db.ObjectId
  comment  String
  post     Post?  @relation(fields: [postId], references: [id])
  postId   String @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
